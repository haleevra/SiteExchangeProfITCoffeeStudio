
Функция GetItemsGET(Запрос)
	id = Запрос.ПараметрыЗапроса.Получить("id");
	
	ТоварыJSON = ПолучитьТоварыJSON(id);
	//Если Не ЗначениеЗаполнено(code) Тогда
	//	Возврат СообщениеОбОшибке(
	//	400,
	//	"Bad Request",
	//	НСтр("ru = 'Ошибка авторизации: отсутствует параметр ""code""'"));
	//КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(ТоварыJSON);
	//Если ПараметрыАвторизации.Свойство("closebrowser")
	//	И НРег(ПараметрыАвторизации.closebrowser) = "true" Тогда
	//	Ответ.Заголовки["Content-type"] = "text/html";
	//	Ответ.УстановитьТелоИзСтроки(
	//	"<html><body onload=""parent.close()"">You can now close this window and continue.</body></html>");
	//КонецЕсли;
	Возврат Ответ;
КонецФункции

&НаСервере
Функция ПолучитьТоварыJSON(id)	
	// надо продумать алгоритм получения узла обмена, 
	// возможно получать id узла в формате уникального идентификатора
	УзелОбмена = ПланыОбмена.ОбменССайтом.НайтиПоКоду("AEH");
	Фильтр = Неопределено;
	
	Если ЗначениеЗаполнено(id) Тогда
		//регистрируем весь справочник для обмена
		МассивУзлов = Новый Массив;
		МассивУзлов.Добавить(УзелОбмена);
		Если id="all" Тогда
			РегистрируемыеДанные = Метаданные.Справочники.Номенклатура;
		Иначе
			РегистрируемыеДанные = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(id));
			Фильтр = Новый Массив;
			Фильтр.Добавить(РегистрируемыеДанные);
		КонецЕсли;
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, РегистрируемыеДанные);
	КонецЕсли;
	
	Выборка = ПланыОбмена.ВыбратьИзменения(УзелОбмена, УзелОбмена.НомерОтправленного+1, Фильтр);
	
	СписокОбъектов = СоздатьОбъект("Objects");
	СчетчикОбъектов = 0;
	Пока Выборка.Следующий() Цикл 
		НоменклатураОбъект = Выборка.Получить();
	
		//ТоварыЗаписьJSON.ЗаписатьНачалоОбъекта();
		//
		//ТоварыЗаписьJSON.ЗаписатьИмяСвойства("Item");
		ЗаписатьДанные(СписокОбъектов, НоменклатураОбъект, СчетчикОбъектов);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, НоменклатураОбъект);
		Если СчетчикОбъектов >= УзелОбмена.РазмерПорции Тогда
			Прервать;
		КонецЕсли;
		//ТоварыЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла;
	
	//ТоварыЗаписьJSON.ЗаписатьКонецМассива();
	НоваяЗаписьJSON = Новый ЗаписьJSON();
	НоваяЗаписьJSON.УстановитьСтроку();
	//НоваяЗаписьJSON.ЗаписатьНачалоОбъекта();
	ФабрикаXDTO.ЗаписатьJSON(НоваяЗаписьJSON, СписокОбъектов);
	//НоваяЗаписьJSON.ЗаписатьКонецОбъекта();
	Возврат НоваяЗаписьJSON.Закрыть();	
КонецФункции

// Функция создает объект XDTO
//
Функция СоздатьОбъект(ТипОбъекта) Экспорт
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.prof-it.ru/SiteExchange", ТипОбъекта));
	
КонецФункции // СоздатьОбъект()

// Процедура записывает данные в формат JSON
// Процедура анализирует переданный объект данных и на основе этого анализа
// записывает его определенным образом в формат JSON
//
// Параметры:
//  СписокОбъектов - объект, записывающий JSON данные
//  Данные 		   - данные, подлежащие записи в формат JSON
//
Процедура ЗаписатьДанные(СписокОбъектов, Данные, СчетчикОбъектов) Экспорт
	
	ОбъектXDTO = ПолучитьОбъектXDTO(Данные, СчетчикОбъектов);
	
	Если ОбъектXDTO <> Неопределено Тогда
		СписокОбъектов.Objects.Добавить(ОбъектXDTO);
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьДанные()

// Получает объект XDTO из переданного объекта конфигурации.
//
Функция ПолучитьОбъектXDTO(Данные, СчетчикОбъектов)
	
	ПередаваемыйОбъект = Неопределено;
	
	Попытка
		
		Если ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура") Тогда
			
			ПередаваемыйОбъект = СоздатьОбъект("CatItems");
			ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
			ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
			ПередаваемыйОбъект.Name = Данные.Наименование;
			ПередаваемыйОбъект.Group = ПолучитьОбъектXDTO(Данные.Родитель, СчетчикОбъектов);
			ПередаваемыйОбъект.ThisIsGroup = Данные.ЭтоГруппа;
			Если НЕ Данные.ЭтоГруппа Тогда
				ПередаваемыйОбъект.Article = Данные.Артикул;
				ПередаваемыйОбъект.Barcode = ПолучитьШтрихкод(Данные.Ссылка);
				ПередаваемыйОбъект.Image = ПолучитьКартинку(Данные.ФайлКартинки);
			КонецЕсли;			
			
		ИначеЕсли ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
			
			ПередаваемыйОбъект = СоздатьОбъект("ObjectDeletion");
			ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
			
			Если ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
				ПередаваемыйОбъект.Type = "CatItems";
			КонецЕсли;
			
		КонецЕсли;
		СчетчикОбъектов=СчетчикОбъектов+1;
	Исключение
		
	КонецПопытки;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции // ПолучитьОбъектXDTO()

// Получает картинку.
//
Функция ПолучитьКартинку(ФайлКартинки)
	
	ДвоичныеДанныеФайла = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ФайлКартинки);
	СериализиаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	
	Попытка
		КартинкаXDTO = СериализиаторXDTO.ЗаписатьXDTO(ДвоичныеДанныеФайла);
	Исключение
		КартинкаXDTO = Неопределено;
	КонецПопытки;
	
	Возврат КартинкаXDTO;
	
КонецФункции

// Получает Штрихкод по ссылке
Функция ПолучитьШтрихкод(Ссылка)
	Результат = "";
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Номенклатура = &Номенклатура"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Штрихкод;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция TestTest(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("ОК!");
	Возврат Ответ;
КонецФункции
